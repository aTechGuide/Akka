akka {
  loglevel = INFO
}

mySpecialConfig {
  akka {
    loglevel = INFO
  }
}

# For Timed Assertions test Config
specialTimedAssertionsConfig {
  akka.test.single-expect-default = 0.3s
}

# intercepting log messages test
interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
    test {
      filter-leeway = 5s
    }
  }
}

# Routers Demo
routersDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }
      /groupMaster2 {
        router = round-robin-group
        routees.paths = ["/user/slave_1", "/user/slave_2", "/user/slave_3", "/user/slave_4", "/user/slave_5"]
      }
    }
  }
}

# Dispatchers Demo

my-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1
  }
  throughput = 30 // This is the number of messages that a dispatcher can handle for one actor until that thread moves to another actor.
}

dispatchersDemo {
  // Method - 1 -> Programmatically / In Code
  my-dispatcher {
    type = Dispatcher # By far the most used
    # PinnedDispatcher: which binds each actor to a thread pool of exactly one thread and those threads might circle around. This is why it's called Pinned. Because each actor is pinned to its own thread pool
    # CallingThreadDispatcher: It ensures that all invocations and all communications with an actor happen on the calling thread whatever that thread is. Which is why this is called the calling thread dispatcher.

    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 1
    }
    throughput = 30 // This is the number of messages that a dispatcher can handle for one actor until that thread moves to another actor.
  }

  // Method - 2
  akka.actor.deployment {
    /rtjvm {
      dispatcher = my-dispatcher
    }
  }
}